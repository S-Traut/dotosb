"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Storyboard = void 0;
exports.fromFile = fromFile;
exports.fromString = fromString;

var _sprite = require("./sprite.js");

var _animation = _interopRequireDefault(require("./animation.js"));

var _fs = _interopRequireDefault(require("fs"));

var _event = require("./event.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Storyboard = /*#__PURE__*/function () {
  function Storyboard() {
    _classCallCheck(this, Storyboard);

    _defineProperty(this, "layers", new Map());

    var layers = new Map();
    layers.set('Background', []);
    layers.set('Fail', []);
    layers.set('Pass', []);
    layers.set('Foreground', []);
    layers.set('Overlay', []);
    this.layers = layers;
  }

  _createClass(Storyboard, [{
    key: "createSprite",
    value: function createSprite(path, options) {
      var _options$layer;

      var sprite = new _sprite.Sprite(path, options);
      var storyboard_layer = this.layers.get((_options$layer = options === null || options === void 0 ? void 0 : options.layer) !== null && _options$layer !== void 0 ? _options$layer : "Background");
      storyboard_layer.push(sprite);
      return sprite;
    }
  }, {
    key: "createAnimation",
    value: function createAnimation(path, frame_count, frame_delay, options) {
      var _options$layer2;

      var animation = new _animation["default"](path, frame_count, frame_delay, options);
      var storyboard_layer = this.layers.get((_options$layer2 = options === null || options === void 0 ? void 0 : options.layer) !== null && _options$layer2 !== void 0 ? _options$layer2 : "Background");
      storyboard_layer.push(animation);
      return animation;
    }
  }, {
    key: "addSprite",
    value: function addSprite(sprite) {
      var storyboard_layer = this.layers.get(sprite.layer);
      storyboard_layer.push(sprite);
    }
  }, {
    key: "toString",
    value: function toString() {
      var storyboard = '[Events]\n//Background and Video events\n';
      var index = 0;

      var _iterator = _createForOfIteratorHelper(this.layers),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var _step$value = _slicedToArray(_step.value, 2),
              name = _step$value[0],
              sprites = _step$value[1];

          storyboard += "//Storyboard Layer ".concat(index, " (").concat(name, ")\n");

          for (var i = 0; i < sprites.length; i++) {
            storyboard += sprites[i].toString();
          }

          index++;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }

      return storyboard;
    }
  }, {
    key: "write",
    value: function write(file_path) {
      _fs["default"].writeFile(file_path, this.toString(), function (e) {
        if (e) throw e;
        console.log('Successfuly generated storyboard!');
      });
    }
  }]);

  return Storyboard;
}();

exports.Storyboard = Storyboard;

function fromFile(file_path) {
  var data = _fs["default"].readFileSync(file_path, 'utf8');

  data = data.replace(/(\r\n|\r|\n)/g, '\n');
  data = data.replace('\\', '/');
  return fromString(data);
}

function fromString(data) {
  var layers = data.split('//Storyboard Layer ');
  layers.shift();
  var storyboard = new Storyboard();

  var _iterator2 = _createForOfIteratorHelper(layers),
      _step2;

  try {
    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
      var layer = _step2.value;
      var sprites = layer.match(/(?=Sprite)(.*)(\n [A-Z](.*)|\n  [A-Z](.*))+/g);
      if (!sprites) continue;

      for (var i = 0; i < sprites.length; i++) {
        var spritelines = sprites[i].split('\n');
        var values = spritelines[0].split(',');
        spritelines.shift();
        var sprite = storyboard.createSprite(values[3].replace(/^"(.*)"$/, '$1'), {
          layer: values[1],
          origin: values[2],
          x: values[4],
          y: values[5]
        });
        var capture = [];
        var loop = void 0;
        var capturing = false;

        for (var e = 0; e < spritelines.length; e++) {
          var event_values = spritelines[e].split(',');
          var type = event_values[0].replace(/ /g, '');

          if (capturing && spritelines[e].split(',')[0][1] != ' ') {
            capturing = false;
            sprite.createLoop(loop.start, loop.count, capture);
            capture = [];
          }

          if (type == 'L') {
            capturing = true;
            loop = {
              start: parseInt(event_values[1]),
              count: parseInt(event_values[2])
            };
            continue;
          }

          var isDynamic = event_values[3] == '' ? false : true;
          var event_action_values = event_values.slice(4).map(function (e) {
            return parseFloat(e);
          });
          var start_values = event_action_values;
          var end_values = null;

          if (isDynamic) {
            var half = Math.ceil(event_action_values.length / 2);
            start_values = event_action_values.slice(0, half);
            end_values = event_action_values.slice(-half);
          }

          var times_built = isDynamic ? [parseInt(event_values[2]), parseInt(event_values[3])] : parseInt(event_values[2]);
          var values_built = isDynamic ? start_values.concat(end_values) : start_values;

          if (capturing) {
            if (type == 'P') {
              capture.push((0, _event.newParam)(parseInt(event_values[2]), parseInt(event_values[3]), event_values[4]));
            } else {
              capture.push((0, _event.newEvent)(type, times_built, values_built, event_values[1]));
            }
          } else {
            if (type == 'P') {
              sprite.param(parseInt(event_values[2]), parseInt(event_values[3]), event_values[4]);
            } else {
              sprite.add(type, times_built, values_built, event_values[1]);
            }
          }
        }
      }
    }
  } catch (err) {
    _iterator2.e(err);
  } finally {
    _iterator2.f();
  }

  return storyboard;
}
