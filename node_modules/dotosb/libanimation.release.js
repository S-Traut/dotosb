"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _dotosb = require("dotosb");

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Animation = /*#__PURE__*/function (_Sprite) {
  _inherits(Animation, _Sprite);

  var _super = _createSuper(Animation);

  function Animation(path, frame_count, frame_delay, options) {
    var _options$layer, _options$origin, _options$loop_type, _options$x, _options$y;

    var _this;

    _classCallCheck(this, Animation);

    _this = _super.call(this);

    _defineProperty(_assertThisInitialized(_this), "frame_count", void 0);

    _defineProperty(_assertThisInitialized(_this), "frame_delay", void 0);

    _defineProperty(_assertThisInitialized(_this), "loop_type", void 0);

    _this.frame_count = frame_count;
    _this.frame_delay = frame_delay;
    _this.layer = (_options$layer = options === null || options === void 0 ? void 0 : options.layer) !== null && _options$layer !== void 0 ? _options$layer : "Background";
    _this.origin = (_options$origin = options === null || options === void 0 ? void 0 : options.origin) !== null && _options$origin !== void 0 ? _options$origin : "Centre";
    _this.loop_type = (_options$loop_type = options === null || options === void 0 ? void 0 : options.loop_type) !== null && _options$loop_type !== void 0 ? _options$loop_type : "LoopForever";
    _this.path = path;
    _this.x = (_options$x = options === null || options === void 0 ? void 0 : options.x) !== null && _options$x !== void 0 ? _options$x : 320;
    _this.y = (_options$y = options === null || options === void 0 ? void 0 : options.y) !== null && _options$y !== void 0 ? _options$y : 240;
    return _this;
  }

  _createClass(Animation, [{
    key: "toString",
    value: function toString() {
      var sprite = "Animation,".concat(this.layer, ",").concat(this.origin, ",\"").concat(this.path, "\",").concat(this.x, ",").concat(this.y, ",").concat(this.frame_count, ",").concat(this.frame_delay, ",").concat(this.loop_type, "\n");

      for (var i = 0; i < this.events.length; i++) {
        sprite += "".concat(this.events[i].stringified, "\n");
      }

      return sprite;
    }
  }]);

  return Animation;
}(_dotosb.Sprite);

exports["default"] = Animation;
