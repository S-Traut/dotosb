"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

var IntervalMap = /*#__PURE__*/function () {
  function IntervalMap() {
    _classCallCheck(this, IntervalMap);

    this.start_times = [];
    this.end_times = [];
    this.empty = true;
    this.count = 0;
  }

  _createClass(IntervalMap, [{
    key: "add",
    value: function add(event) {
      if (!event.end) {
        throw "Can't add event to imap without end time.";
        return;
      }

      if (this.empty) this.empty = false;
      this.start_times.push({
        time: event.start,
        event: event
      });
      this.end_times.push({
        time: event.end,
        event: event
      });
      this.count++;
    } // Currently unoptimized query method, could be improved using binary
    // searches.

  }, {
    key: "query",
    value: function query(time) {
      if (this.empty) {
        console.log("Warning, trying to query empty imap");
      }

      var events = [];

      for (var i = 0; i < this.count; i++) {
        if (time >= this.start_times[i].time) {
          if (time <= this.end_times[i].time) {
            events.push(this.start_times[i].event);
          }
        }
      }

      return events;
    }
  }]);

  return IntervalMap;
}();

exports["default"] = IntervalMap;
