"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Sprite = void 0;

var _event = require("./event.js");

var _imap = _interopRequireDefault(require("./imap.js"));

var _easing = require("./easing.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var Sprite = /*#__PURE__*/function () {
  function Sprite(path, options) {
    var _options$layer, _options$origin, _options$x, _options$y;

    _classCallCheck(this, Sprite);

    _defineProperty(this, "events", []);

    _defineProperty(this, "path", void 0);

    _defineProperty(this, "origin", void 0);

    _defineProperty(this, "layer", void 0);

    _defineProperty(this, "x", void 0);

    _defineProperty(this, "y", void 0);

    this.layer = (_options$layer = options === null || options === void 0 ? void 0 : options.layer) !== null && _options$layer !== void 0 ? _options$layer : "Background";
    this.origin = (_options$origin = options === null || options === void 0 ? void 0 : options.origin) !== null && _options$origin !== void 0 ? _options$origin : "Centre";
    this.path = path;
    this.x = (_options$x = options === null || options === void 0 ? void 0 : options.x) !== null && _options$x !== void 0 ? _options$x : 320;
    this.y = (_options$y = options === null || options === void 0 ? void 0 : options.y) !== null && _options$y !== void 0 ? _options$y : 240;
    this.imap = new _imap["default"]();
  }

  _createClass(Sprite, [{
    key: "add",
    value: function add(type, times, values) {
      var easing = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
      var event = (0, _event.newEvent)(type, times, values, easing);
      if (Array.isArray(times)) this.imap.add(event);
      this.events.push(event);
    }
    /**
    * Query sprite parameters at a given time
    */

  }, {
    key: "getAt",
    value: function getAt(type, time) {
      var length = this.events.length;
      var events = this.imap.query(time);

      var _iterator = _createForOfIteratorHelper(events),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var event = _step.value;
          if (event.type != type) continue;
          var vcount = event.start_values.length;
          var differences = [];
          var p = Math.abs((time - event.start) / (event.start - event.end));
          var easing = (0, _easing.ease)(event.easing, p);

          for (var i = 0; i < vcount; i++) {
            var diff = Math.abs(event.start_values[i] - event.end_values[i]);
            differences.push(event.start_values[i] + diff * easing);
          }

          return differences.length == 1 ? differences[0] : differences;
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }
  }, {
    key: "param",
    value: function param(start, end, type) {
      var param = (0, _event.newParam)(start, end, type);
      this.events.push(param);
    }
  }, {
    key: "createLoop",
    value: function createLoop(start, loop_count, events) {
      var stringified = " L,".concat(start, ",").concat(loop_count);

      for (var i = 0; i < events.length; i++) {
        stringified += "\n ".concat(events[i].stringified);
      }

      var event = {
        type: 'L',
        start: start,
        loop_count: loop_count,
        events: events,
        stringified: stringified
      };
      this.events.push(event);
    }
  }, {
    key: "toString",
    value: function toString() {
      var sprite = "Sprite,".concat(this.layer, ",").concat(this.origin, ",\"").concat(this.path, "\",").concat(this.x, ",").concat(this.y, "\n");

      for (var i = 0; i < this.events.length; i++) {
        sprite += "".concat(this.events[i].stringified, "\n");
      }

      return sprite;
    }
  }]);

  return Sprite;
}();

exports.Sprite = Sprite;
