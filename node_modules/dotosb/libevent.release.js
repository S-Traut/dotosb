"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.newEvent = newEvent;
exports.newParam = newParam;

var _utils = require("./utils.js");

function parseValues(values, isTime) {
  if (Array.isArray(values)) {
    var stringified = '';
    values.map(function (s) {
      stringified += "".concat(s, ",");
    });
    return stringified.slice(0, -1);
    ;
  } else {
    return isTime ? "".concat(values, ",") : "".concat(values);
  }
}

function isValid(event) {
  var type = _utils.EVENT_TYPES.get(event.type);

  if (!type) {
    console.trace();
    console.log(event);
    throw "This event type is not allowed '".concat(event.type, "'\nAllowed events: ").concat(_utils.EVENT_TYPES.values(), "\n");
  }

  var sval_size = Array.isArray(event.start_values) ? event.start_values.length : 1;
  var eval_size = Array.isArray(event.end_values) ? event.start_values.length : 1;

  if (sval_size != type) {
    console.trace();
    console.log(event);
    throw "Start value(s) given for the event of type '".concat(event.type, "' are not valid\n given: ").concat(sval_size, " -> required: ").concat(type, "\n");
  }

  if (event.end_values && eval_size != type) {
    console.trace();
    throw "End value(s) given for the event of type '".concat(event.type, "' are not valid\n given: ").concat(eval_size, " -> required: ").concat(type, "\n");
  }

  return true;
}

function newEvent(type, times, values) {
  var easing = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 0;
  var start_values = values;
  var end_values = null;
  values = sanitizeValues(values);

  if (Array.isArray(values) && Array.isArray(times)) {
    var half = Math.ceil(values.length / 2);
    start_values = values.slice(0, half);
    end_values = values.slice(-half);
  }

  var event = {
    type: type,
    easing: easing,
    start: Array.isArray(times) ? times[0] : times,
    end: Array.isArray(times) ? times[1] : null,
    start_values: start_values,
    end_values: end_values,
    stringified: " ".concat(type, ",").concat(easing, ",").concat(parseValues(times, true), ",").concat(parseValues(values))
  };
  if (isValid(event)) return event;
}

function newParam(start, end, type) {
  var param = {
    type: type,
    start: start,
    end: end,
    stringified: " P,0,".concat(start, ",").concat(end, ",").concat(type)
  };
  return param;
}

function sanitizeValues(values) {
  if (!Array.isArray(values)) return parseFloat(values.toFixed(4));
  return values.map(function (v) {
    var decimals = 0;
    var str = String(v);

    if (str.includes('.')) {
      decimals = str.split('.')[1].length;
    }

    if (decimals > 4) {
      return parseFloat(v.toFixed(4));
    }

    return v;
  });
}
