"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ease = ease;

var step = function step(x) {
  return x >= 1 ? 1 : x;
};

var linear = function linear(x) {
  return x;
};

var quadIn = function quadIn(x) {
  return x * x;
};

var quadOut = function quadOut(x) {
  return reverse(quadIn, x);
};

var quadInOut = function quadInOut(x) {
  return toInOut(quadIn, x);
};

var cubicIn = function cubicIn(x) {
  return x * x * x;
};

var cubicOut = function cubicOut(x) {
  return reverse(cubicIn, x);
};

var cubicInOut = function cubicInOut(x) {
  return toInOut(cubicIn, x);
};

var quartIn = function quartIn(x) {
  return x * x * x * x;
};

var quartOut = function quartOut(x) {
  return reverse(quartIn, x);
};

var quartInOut = function quartInOut(x) {
  return toInOut(quartIn, x);
};

var quintIn = function quintIn(x) {
  return x * x * x * x * x;
};

var quintOut = function quintOut(x) {
  return reverse(quintIn, x);
};

var quintInOut = function quintInOut(x) {
  return toInOut(quintIn, x);
};

var sineIn = function sineIn(x) {
  return 1 - Math.cos(x * Math.PI / 2);
};

var sineOut = function sineOut(x) {
  return reverse(sineIn, x);
};

var sineInOut = function sineInOut(x) {
  return toInOut(sineIn, x);
};

var expoIn = function expoIn(x) {
  return Math.pow(2, 10 * (x - 1));
};

var expoOut = function expoOut(x) {
  return reverse(expoIn, x);
};

var expoInOut = function expoInOut(x) {
  return toInOut(expoIn, x);
};

var circIn = function circIn(x) {
  return 1 - Math.sqrt(1 - x * x);
};

var circOut = function circOut(x) {
  return reverse(circIn, x);
};

var circInOut = function circInOut(x) {
  return toInOut(circIn, x);
};

var backIn = function backIn(x) {
  return x * x * ((1.70158 + 1) * x - 1.70158);
};

var backOut = function backOut(x) {
  return reverse(backIn, x);
};

var backInOut = function backInOut(x) {
  return toInOut(function (y) {
    return y * y * ((1.70158 * 1.525 + 1) * y - 1.70158 * 1.525);
  }, x);
};

var bounceIn = function bounceIn(x) {
  return reverse(bounceOut, x);
};

var bounceOut = function bounceOut(x) {
  return x < 1 / 2.75 ? 7.5625 * x * x : x < 2 / 2.75 ? 7.5625 * (x -= 1.5 / 2.75) * x + 0.75 : x < 2.5 / 2.75 ? 7.5625 * (x -= 2.25 / 2.75) * x + 0.9375 : 7.5625 * (x -= 2.625 / 2.75) * x + 0.984375;
};

var bounceInOut = function bounceInOut(x) {
  return toInOut(bounceIn, x);
};

var elasticIn = function elasticIn(x) {
  return reverse(elasticOut, x);
};

var elasticOut = function elasticOut(x) {
  return Math.pow(2, -10 * x) * Math.sin((x - 0.075) * (2 * Math.PI) / 0.3) + 1;
};

var elasticInOut = function elasticInOut(x) {
  return toInOut(elasticIn, x);
};

var functions = [linear, quadIn, quadOut, quadInOut, cubicIn, cubicOut, cubicInOut, quartIn, quartOut, quartInOut, quintIn, quintOut, quintInOut, sineIn, sineOut, sineInOut, expoIn, expoOut, expoInOut, circIn, circOut, circInOut, backIn, backOut, backInOut, bounceIn, bounceOut, bounceInOut, elasticIn, elasticOut, elasticInOut];

function ease(easing, value) {
  return functions[easing].call(this, value);
}

function reverse(func, value) {
  return 1 - func.call(1 - value);
}

function toInOut(func, value) {
  return 0.5 * (value < 0.5 ? func(2 * value) : 2 - func(2 - 2 * value));
}
